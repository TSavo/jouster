import { SetupWizard } from '../../wizard/setup-wizard';
// Create a mock for the run method\nconst mockRun = jest.fn().mockResolvedValue(undefined);\n\n// Mock the SetupWizard class\njest.mock('../../wizard/setup-wizard', () => {\n  return {\n    SetupWizard: jest.fn().mockImplementation(() => {\n      return {\n        run: mockRun\n      };\n    })\n  };\n});
\n// Mock process.argv and process.cwd\nconst originalArgv = process.argv;\nconst originalCwd = process.cwd;\n\ndescribe('CLI', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock process.argv\n    process.argv = ['node', 'jouster-setup'];\n    \n    // Mock process.cwd\n    process.cwd = jest.fn().mockReturnValue('/mock/project/root');\n    \n    // Mock console.log\n    jest.spyOn(console, 'log').mockImplementation();\n  });\n  \n  afterEach(() => {\n    // Restore process.argv and process.cwd\n    process.argv = originalArgv;\n    process.cwd = originalCwd;\n    \n    // Restore console.log\n    jest.restoreAllMocks();\n  });
\n  it('should run the wizard in non-interactive mode by default', async () => {\n    // Import the CLI module (which will execute the main function)\n    await import('../../wizard/cli');\n    \n    // Verify that SetupWizard was called with the correct arguments\n    expect(SetupWizard).toHaveBeenCalledWith('/mock/project/root', false);\n    \n    // Verify that run was called\n    expect(mockRun).toHaveBeenCalled();\n  });\n  \n  it('should run the wizard in interactive mode when --interactive flag is provided', async () => {\n    // Set process.argv to include --interactive flag\n    process.argv = ['node', 'jouster-setup', '--interactive'];\n    \n    // Import the CLI module (which will execute the main function)\n    await import('../../wizard/cli');\n    \n    // Verify that SetupWizard was called with the correct arguments\n    expect(SetupWizard).toHaveBeenCalledWith('/mock/project/root', true);\n    \n    // Verify that run was called\n    expect(mockRun).toHaveBeenCalled();\n  });
\n  it('should run the wizard in interactive mode when -i flag is provided', async () => {\n    // Set process.argv to include -i flag\n    process.argv = ['node', 'jouster-setup', '-i'];\n    \n    // Import the CLI module (which will execute the main function)\n    await import('../../wizard/cli');\n    \n    // Verify that SetupWizard was called with the correct arguments\n    expect(SetupWizard).toHaveBeenCalledWith('/mock/project/root', true);\n    \n    // Verify that run was called\n    expect(mockRun).toHaveBeenCalled();\n  });\n  \n  it('should show help message when --help flag is provided', async () => {\n    // Set process.argv to include --help flag\n    process.argv = ['node', 'jouster-setup', '--help'];\n    \n    // Import the CLI module (which will execute the main function)\n    await import('../../wizard/cli');\n    \n    // Verify that SetupWizard was not called\n    expect(SetupWizard).not.toHaveBeenCalled();\n    \n    // Verify that console.log was called with help message\n    expect(console.log).toHaveBeenCalledWith(\n      expect.stringContaining('Jouster Setup Wizard')\n    );\n  });
\n  it('should show help message when -h flag is provided', async () => {\n    // Set process.argv to include -h flag\n    process.argv = ['node', 'jouster-setup', '-h'];\n    \n    // Import the CLI module (which will execute the main function)\n    await import('../../wizard/cli');\n    \n    // Verify that SetupWizard was not called\n    expect(SetupWizard).not.toHaveBeenCalled();\n    \n    // Verify that console.log was called with help message\n    expect(console.log).toHaveBeenCalledWith(\n      expect.stringContaining('Jouster Setup Wizard')\n    );\n  });\n});
